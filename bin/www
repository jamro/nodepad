#!/usr/bin/env node

/**
 * Module dependencies.
 */

const appCreate = require('../app').create;
const http = require('http');
const path = require('path');

/**
 * Get port from environment and store in Express.
 */

const externalConfig = (process.argv && process.argv[2]) ? path.resolve(process.argv[2]) : null;

const config = require(externalConfig || '../config.js');
const {app, proxy} = appCreate(config);
var appPort = normalizePort(config.appPort || 3333);
var proxyPort = normalizePort(config.proxyPort || 3000);
app.set('port', appPort);
proxy.set('port', proxyPort);

/**
 * Create HTTP server.
 */
app.logger.info('Starting web servers...')
var appServer = http.createServer(app);
var proxyServer = http.createServer(proxy);

/**
 * Listen on provided port, on all network interfaces.
 */

appServer.listen(appPort);
appServer.on('error', (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + appPort
    : 'Port ' + appPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      app.logger.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      app.logger.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
});
appServer.on('listening', () => {
  var addr = appServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  app.logger.info('NodePad (APP) listening on ' + bind);
});

proxyServer.listen(proxyPort);
proxyServer.on('error', (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + proxyPort
    : 'Port ' + proxyPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      app.logger.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      app.logger.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
});
proxyServer.on('listening', () => {
  var addr = proxyServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  app.logger.info('NodePad (PROXY) listening on ' + bind);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
