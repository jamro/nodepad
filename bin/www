#!/usr/bin/env node

/**
 * Module dependencies.
 */

const http = require('http');
const path = require('path');
const { createDashboard } = require('../src/dashboard');
const { createProxy } = require('../src/proxy');

/**
 * Get port from environment and store in Express.
 */

const externalConfig = (process.argv && process.argv[2]) ? path.resolve(process.argv[2]) : null;

const config = require(externalConfig || '../config.js');
const dashboard = createDashboard(config);
const proxy = createProxy(config);
var dashboardPort = normalizePort(config.dashboardPort || 3333);
var proxyPort = normalizePort(config.proxyPort || 3000);
dashboard.set('port', dashboardPort);
proxy.set('port', proxyPort);

/**
 * Create HTTP server.
 */
 dashboard.logger.info('Starting web servers...')
var dashboardServer = http.createServer(dashboard);
var proxyServer = http.createServer(proxy);

/**
 * Listen on provided port, on all network interfaces.
 */

dashboardServer.listen(dashboardPort);
dashboardServer.on('error', (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + dashboardPort
    : 'Port ' + dashboardPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      dashboard.logger.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      dashboard.logger.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
});
dashboardServer.on('listening', () => {
  var addr = dashboardServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  dashboard.logger.info('NodePad (DASHBOARD) listening on ' + bind);
});

proxyServer.listen(proxyPort);
proxyServer.on('error', (error) => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + proxyPort
    : 'Port ' + proxyPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      proxy.logger.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      proxy.logger.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
});
proxyServer.on('listening', () => {
  var addr = proxyServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  proxy.logger.info('NodePad (PROXY) listening on ' + bind);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
